/*
      On any opening or closing tag of the original markup we first close
      the entire highlighted node stack, then render the original tag along
      with all the following original tags at the same offset and then
      reopen all the tags on the highlighted stack.
      */

/*
      The lookahead pattern (?=...) ensures that 'begin' only matches
      '<style' as a single word, followed by a whitespace or an
      ending braket. The '$' is needed for the lexeme to be recognized
      by hljs.subMode() that tests lexemes outside the stream.
      */

/*
      Why might be find ourselves here?  Only one occasion now.  An end match that was
      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`
      rule sets the end rule to a specific match.  Since the overall mode termination rule that's
      being used to scan the text isn't recompiled that means that any match that LOOKS like
      the end (but is not, because it is not an exact match to the beginning) will
      end up here.  A definite end match, but when `doEndMatch` tries to "reapply"
      the end rule and fails to match, we wind up here, and just silently ignore the end.
       This causes no real harm other than stopping a few times too many.
      */

/*
    Created to solve the key deficiently with MultiRegex - there is no way to
    test for multiple matches at a single location.  Why would we need to do
    that?  In the future a more dynamic engine will allow certain matches to be
    ignored.  An example: if we matched say the 3rd regex in a large group but
    decided to ignore it - we'd need to started testing again at the 4th
    regex... but MultiRegex itself gives us no real way to do that.
     So what this class creates MultiRegexs on the fly for whatever search
    position they are needed.
     NOTE: These additional MultiRegex objects are created dynamically.  For most
    grammars most of the time we will never actually need anything more than the
    first MultiRegex - so this shouldn't have too much overhead.
     Say this is our search group, and we match regex3, but wish to ignore it.
       regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0
     What we need is a new MultiRegex that only includes the remaining
    possibilities:
       regex4 | regex5                               ' ie, startAt = 3
     This class wraps all that complexity up in a simple API... `startAt` decides
    where in the array of expressions to start doing the matching. It
    auto-increments, so if a match is found at position 2, then startAt will be
    set to 3.  If the end is reached startAt will return to 0.
     MOST of the time the parser will be setting startAt manually to 0.
  */

/*
    To avoid starting the stream just before it should stop the order is
    ensured that original always starts first and closes last:
     if (event1 == 'start' && event2 == 'start')
      return original;
    if (event1 == 'start' && event2 == 'stop')
      return highlighted;
    if (event1 == 'stop' && event2 == 'start')
      return original;
    if (event1 == 'stop' && event2 == 'stop')
      return highlighted;
     ... which is collapsed to:
    */

/*
    intended usage: When one language truly requires another
     Unlike `getLanguage`, this will throw when the requested language
    is not available.
  */

/*
  Applies highlighting to a DOM node containing code. Accepts a DOM node and
  two optional parameters for fixMarkup.
  */

/*
  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
  */

/*
  Attaches highlighting to the page load event.
  */

/*
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:
   - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - second_best (object with the same structure for second-best heuristically
    detected language, may be absent)
   */

/*
  Post-processing of the highlighted markup:
   - replace TABs with something more useful
  - replace real line-breaks with '<br>' for non-pre containers
   */

/*
  Updates highlight.js global options with values passed in the form of an object.
  */

/*
 Language: SQL
 Contributors: Nikolay Lisienko <info@neor.ru>, Heiko August <post@auge8472.de>, Travis Odom <travis.a.odom@gmail.com>, Vadimtro <vadimtro@yahoo.com>, Benjamin Auder <benjamin.auder@gmail.com>
 Website: https://en.wikipedia.org/wiki/SQL
 Category: common
 */

/*
Language: Bash
Author: vah <vahtenberg@gmail.com>
Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
Website: https://www.gnu.org/software/bash/
Category: common
*/

/*
Language: CSS
Category: common, css
Website: https://developer.mozilla.org/en-US/docs/Web/CSS
*/

/*
Language: HTML, XML
Website: https://www.w3.org/XML/
Category: common
*/

/*
Language: JavaScript
Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
Category: common, scripting
Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
*/

/*
Language: PHP
Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: https://www.php.net
Category: common
*/

/*
Language: PHP Template
Requires: xml.js, php.js
Author: Josh Goebel <hello@joshgoebel.com>
Website: https://www.php.net
Category: common
*/

/*
Language: Plain text
Author: Egor Rogov (e.rogov@postgrespro.ru)
Description: Plain text without any highlighting.
Category: common
*/

/*
Language: SCSS
Description: Scss is an extension of the syntax of CSS.
Author: Kurt Emch <kurt@kurtemch.com>
Website: https://sass-lang.com
Category: common, css
*/

/*
Language: Twig
Requires: xml.js
Author: Luke Holder <lukemh@gmail.com>
Description: Twig is a templating language for PHP
Website: https://twig.symfony.com
Category: template
*/

/*
Language: TypeScript
Author: Panu Horsmalahti <panu.horsmalahti@iki.fi>
Contributors: Ike Ku <dempfi@yahoo.com>
Description: TypeScript is a strict superset of JavaScript
Website: https://www.typescriptlang.org
Category: common, scripting
*/

/*
Language: YAML
Description: Yet Another Markdown Language
Author: Stefan Wienert <stwienert@gmail.com>
Contributors: Carl Baxter <carl@cbax.tech>
Requires: ruby.js
Website: https://yaml.org
Category: common, config
*/

/*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/

/* Interface definition */

/* Stream merging */

/* Utility functions */

/* global Reflect, Promise */

/* harmony export (binding) */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/*! @/scss/style.scss */

/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */

/*! highlight.js/lib/core.js */

/*! highlight.js/lib/languages/bash.js */

/*! highlight.js/lib/languages/css.js */

/*! highlight.js/lib/languages/javascript.js */

/*! highlight.js/lib/languages/php-template.js */

/*! highlight.js/lib/languages/php.js */

/*! highlight.js/lib/languages/plaintext.js */

/*! highlight.js/lib/languages/scss.js */

/*! highlight.js/lib/languages/sql.js */

/*! highlight.js/lib/languages/twig.js */

/*! highlight.js/lib/languages/typescript.js */

/*! highlight.js/lib/languages/xml.js */

/*! highlight.js/lib/languages/yaml.js */

/*! highlight.js/scss/monokai.scss */

/*! no static exports found */

/*! tslib */

/*!******************************!*\
  !*** ./resource/ts/index.ts ***!
  \******************************/

/*!**********************************!*\
  !*** ./resource/scss/style.scss ***!
  \**********************************/

/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/

/*!***********************************************!*\
  !*** ./node_modules/highlight.js/lib/core.js ***!
  \***********************************************/

/*!*****************************************************!*\
  !*** ./node_modules/highlight.js/scss/monokai.scss ***!
  \*****************************************************/

/*!********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/css.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/php.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/sql.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/xml.js ***!
  \********************************************************/

/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/bash.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/scss.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/twig.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/yaml.js ***!
  \*********************************************************/

/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/plaintext.js ***!
  \**************************************************************/

/*!***************************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/javascript.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/typescript.js ***!
  \***************************************************************/

/*!*****************************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/php-template.js ***!
  \*****************************************************************/

/*#__PURE__*/

/**
    Stores multiple regular expressions and allows you to quickly search for
    them all in a string simultaneously - returning the first match.  It does
    this by creating a huge (a|b|c) regex - each individual item wrapped with ()
    and joined by `|` - using match groups to track position.  When a match is
    found checking which position in the array has content allows us to figure
    out which of the original regexes / match groups triggered the match.
     The match object itself (the result of `Regex.exec`) is returned but also
    enhanced by merging in any meta-data that was registered with the regex.
    This is how we keep track of which mode matched, and what type of rule
    (`illegal`, `begin`, end, etc).
  */

/**
   * Core highlighting function.
   *
   * @param {string} languageName - the language to use for highlighting
   * @param {string} code - the code to highlight
   * @param {boolean} ignore_illegals - whether to ignore illegal matches, default is to bail
   * @param {array<mode>} continuation - array of continuation modes
   *
   * @returns an object that represents the result
   * @property {string} language - the language name
   * @property {number} relevance - the relevance score
   * @property {string} value - the highlighted HTML code
   * @property {string} code - the original raw code
   * @property {mode} top - top of the current mode stack
   * @property {boolean} illegal - indicates whether any illegal matches were found
  */

/**
  Currently this is all private API, but this is the minimal API necessary
  that an Emitter must implement to fully support the parser.

  Minimal interface:

  - addKeyword(text, kind)
  - addText(text)
  - addSublanguage(emitter, subLangaugeName)
  - finalize()
  - openNode(kind)
  - closeNode()
  - closeAllNodes()
  - toHTML()

*/

/**
 * performs a shallow merge of multiple objects into one
 *
 * @arguments list of objects with properties to merge
 * @returns a single new object
 */

/** skip vs abort vs ignore
   *
   * @skip   - The mode is still entered and exited normally (and contains rules apply),
   *           but all content is held and added to the parent buffer rather than being
   *           output when the mode ends.  Mostly used with `sublanguage` to build up
   *           a single large buffer than can be parsed by sublanguage.
   *
   *             - The mode begin ands ends normally.
   *             - Content matched is added to the parent mode buffer.
   *             - The parser cursor is moved forward normally.
   *
   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
   *           never matched) but DOES NOT continue to match subsequent `contains`
   *           modes.  Abort is bad/suboptimal because it can result in modes
   *           farther down not getting applied because an earlier rule eats the
   *           content but then aborts.
   *
   *             - The mode does not begin.
   *             - Content matched by `begin` is added to the mode buffer.
   *             - The parser cursor is moved forward accordingly.
   *
   * @ignore - Ignores the mode (as if it never matched) and continues to match any
   *           subsequent `contains` modes.  Ignore isn't technically possible with
   *           the current parser implementation.
   *
   *             - The mode does not begin.
   *             - Content matched by `begin` is ignored.
   *             - The parser cursor is not moved forward.
   */

/************************************************************************/

/******/

/***/

//

//     3 / something

//   follow the '(' with a '?'.

//   interesting elements

// "plaintext" stand-in so that the code blocks will still get normal

// "value" container

// (which will then blow up when regex's `illegal` sees the newline)

// - [...] elements, where the meaning of parentheses and escapes change

// - non-matching or lookahead parentheses, which do not capture. These

// - other escape sequences, so we do not misparse escape sequences as

// ---

// ...and ending with a colon followed immediately by a space, tab or newline.

// ...containing word chars, spaces, colons, forward-slashes, hyphens and periods

// <https://www.php.net/manual/en/book.spl.php>

// <https://www.php.net/manual/en/language.constants.predefined.php>

// @font-face

// Adjust the backreference.

// Blocks start with a | or > followed by a newline

// CLONE

// Check if module is in cache

// Common regexps

// Convenience variables for build-in objects

// Counting embedded language score towards the host language may be disabled

// Create a new module (and put it into the cache)

// Define keys as starting with a word character

// ES6 class

// EXPAND

// Execute the module function

// Flag the module as loaded

// Global internal variables used within the highlight.js library.

// Indentation of subsequent lines must be the same to

// JSX

// Load entry module and return exports

// Magic constants:

// Object.prototype.hasOwnProperty.call

// Prevent void elements from having an end tag that would actually

// Ref: https://github.com/highlightjs/highlight.js/issues/2140

// Register

// Return the exports of the module

// Ruby/Rails erb

// See the comment in the <style tag about the lookahead pattern

// Shell built-ins

// Standard PHP library:

// TODO: We need negative look-behind support to do this properly

// TODO: remove |$ hack when we have proper look-ahead support

// The YAML spec allows for much more than this, but this covers most use-cases.

// The module cache

// The require function

// We don't want the php closing tag ?> to close the PHP block when

// __onBegin is considered private API, internal use only

// __webpack_public_path__

// a 0 width match but not a begin/end match so it's not caught by the

// a before plugin can usurp the result completely by providing it's own

// a rule set but instead drops parser into

// a word boundary is not sufficient, so instead we check for a word boundary

// add non-matched text to the current mode buffer

// advance so we aren't stuck in an infinite loop

// allows XML everywhere and makes every XML snippet to have a much larger Markdown

// an expression such as:

// an incorrect parse, it additionally matches the following:

// array listing

// at_rule eating first "{" is a good thing

// auto-detection may not find a better match

// avoids the need to check length every time exec is called

// backreferenceRe matches an open parenthesis or backreference. To avoid

// backreferences so they continue to match.

// be considered part of the block

// because it doesn’t let it to be parsed as

// begin: IDENT_RE, end: '[,|\\s]'

// beta configuration options, subject to change, welcome to discuss

// boost for obvious PHP

// break on Less variables @var: ...

// but we list only those realistically expected in code display.

// compilation

// could be a comma delimited list of params to a function call

// create a fake namespace object

// css classes applied to them - and one bad language won't break the

// data type

// decent number of iterations yet our index (cursor position in our

// define __esModule on exports

// define getter function for harmony exports

// different parents without issue

// doesn't allow spaces in keywords anyways and we still check for the boundary

// doing any actual work, auto highlight starts with

// double them in the output. There are more void elements in HTML

// eat spaces (not newlines) so we can find

// eat to avoid empty params

// edge case for when illegal matches $ (end of line) which is technically

// entire highlighter

// excludes method names from keyword processing

// export an "instance" of the highlighter

// expose the module cache

// expose the modules object (__webpack_modules__)

// extracted by mini-css-extract-plugin

// first

// first handler (when ignoreIllegals is true)

// for languages with keywords that include non-word characters checking for

// fragment id &ref

// fragment reference *ref

// getDefaultExport function for compatibility with non-harmony modules

// give it a temporary name if it doesn't have one in the meta-data

// hard or soft error

// helpers

// http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html

// https://github.com/highlightjs/highlight.js/issues/1086

// https://github.com/substack/deep-freeze/blob/master/index.js

// if it's a regex get it's source,

// if we have dependencies on parents then we need a unique

// if we have variants then essentially "replace" the mode with the variants

// illegal match, we do not continue processing

// in which case we don't even need to call highlight

// infinite loops are BAD, this is a last ditch catch all. if we have a

// inherit(parent, override_obj, override_obj, ...)

// inside any of the following blocks:

// instance of ourselves, so we can be reused with many

// is currently an exercise for the caller. :-)

// it also places each individual regular expression into it's own

// jinja templates Ansible

// join logically computes regexps.join(separator), but fixes the

// just be changing the object it was passed

// keywords

// keywords that should have no default relevance value

// language-* takes precedence over non-prefixed class names.

// languages that have serious errors are replaced with essentially a

// local tags

// manual scores always win over common keywords

// match at this very spot

// match group, keeping track of the sequencing of those match groups

// matching these here allows us to treat them more like regular CSS

// merge all the modes/regexs into our main object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// multi line string

// no more regexs to potentially match here, so we move the cursor forward one

// no need to move the cursor, we still have additional regexes to try and

// numbers are any valid C-style number that

// object attr container

// or whitespace - this does no harm in any case since our keyword engine

// otherwise it's a string already so just return it

// parsing) still 3x behind our index then something is very wrong

// prevent references like module.id from being higlighted as module definitions

// private highlight that's used internally and does not fire callbacks

// renderer API

// returns a valid highlight result, without actually

// rules so everything between the {} gets regular rule highlighting,

// score.

// self is not valid at the top-level

// sit isolated from other words

// so we bail

// so you can force a score of 1 if you really insist

// sometimes they can end up matching nothing at all

// space

// spit the "skipped" character that our regex choked on back into the output sequence

// string

// swallow composed identifiers to avoid parsing them as keywords

// the default mode which is how it should be.

// the plugin can change anything in result to suite it

// the plugin can change the desired language or the code to be highlighted

// this and it's possible for small snippets that

// this happens in compileMode, where this function is called from

// this happens when we have badly behaved rules that have optional matchers to the degree that

// this outer rule makes sure we actually have a WHOLE regex and not simply

// this.regexIndex = 0;

// types or variables

// we've found a 0 width match and we're stuck, so we need to advance

// webpackBootstrap

// which is what we want for page and font-face

// with zeroing the containing mode relevance. Use case in point is Markdown that

// wrap-around

//double quoted keys
