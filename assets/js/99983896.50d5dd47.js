"use strict";(self.webpackChunklionheart_coding_style_guide=self.webpackChunklionheart_coding_style_guide||[]).push([[1337],{8033:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>o});var s=i(5893),r=i(1151);const d={sidebar_position:11},t="Validation::password",n={id:"fegg/library/validation/methods/password",title:"Validation::password",description:"Check allowed character to Password",source:"@site/docs/fegg/library/validation/methods/password.mdx",sourceDirName:"fegg/library/validation/methods",slug:"/fegg/library/validation/methods/password",permalink:"/coding-style-guide/docs/fegg/library/validation/methods/password",draft:!1,unlisted:!1,editUrl:"https://github.com/lionheart-group/coding-style-guide/edit/master/docs/fegg/library/validation/methods/password.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"fegg",previous:{title:"Validation::userId",permalink:"/coding-style-guide/docs/fegg/library/validation/methods/userid"},next:{title:"Validation::maxbyte",permalink:"/coding-style-guide/docs/fegg/library/validation/methods/maxbyte"}},l={},o=[{value:"Description",id:"description",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Example",id:"example",level:2},{value:"Optional Flag",id:"optional-flag",level:3}];function c(e){const a={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"validationpassword",children:"Validation::password"}),"\n",(0,s.jsxs)(a.blockquote,{children:["\n",(0,s.jsx)(a.p,{children:"Check allowed character to Password"}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-php",children:"public boolean Validation::password( string $name, mixed $value, [ mixed $code = '', boolean $mixedLettersFlag = false ] )\n"})}),"\n",(0,s.jsx)(a.h2,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"Name"}),(0,s.jsx)(a.th,{children:"Data type"}),(0,s.jsx)(a.th,{children:"Default"}),(0,s.jsx)(a.th,{children:"Remarks"})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"$name"}),(0,s.jsx)(a.td,{children:"string"}),(0,s.jsx)(a.td,{}),(0,s.jsx)(a.td,{children:"Item label"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"$value"}),(0,s.jsx)(a.td,{children:"mixed"}),(0,s.jsx)(a.td,{}),(0,s.jsx)(a.td,{children:"Check field value"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"$code"}),(0,s.jsx)(a.td,{children:"mixed"}),(0,s.jsx)(a.td,{children:'""'}),(0,s.jsx)(a.td,{children:"Error code or Error message"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"$mixedLettersFlag"}),(0,s.jsx)(a.td,{children:"boolean"}),(0,s.jsx)(a.td,{children:"false"}),(0,s.jsx)(a.td,{children:"Required mixed letters alphanum flag"})]})]})]}),"\n",(0,s.jsx)(a.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-php",metastring:'title="Controller"',children:"$validation = $this->getClass('Validation');\n\n// If $value is alphanumeric\n$successName = 'Success Field';\n$successVar  = 'abcdefhijk';\n$validation->password('success', $successVar, array('@password', $successName));\n\nvar_dump($validation->isError()); // -> false\nvar_dump($validation->getErrorMessage()); // -> null\n\n// If $value is not alphanumeric\n$failedName = 'Failed Field';\n$failedVar  = '\u30d1\u30b9\u30ef\u30fc\u30c9';\n$validation->password('failed', $failedVar, array('@password', $failedName));\n\nvar_dump($validation->isError()); // -> true\nvar_dump($validation->getErrorMessage());\n// -> \"failed\" => \"<strong>Failed Field</strong> \u306f\u767b\u9332\u3067\u304d\u306a\u3044\u5f62\u5f0f\u3067\u3059\"\n"})}),"\n",(0,s.jsx)(a.h3,{id:"optional-flag",children:"Optional Flag"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-php",metastring:'title="Controller"',children:"// If $value is alphabet with disabled mixed letter flag\n$successName = 'Success Field';\n$successVar  = 'abcdefhijk';\n$validation->password('success', $successVar, array('@password', $successName));\n\nvar_dump($validation->isError()); // -> false\nvar_dump($validation->getErrorMessage()); // -> null\n\n// If $value is alphabet with enabled mixed letter flag\n$failedName = 'Failed Field';\n$failedVar  = 'abcdefhijk';\n$validation->password('failed', $failedVar, array('@password_mixed_letters', $failedName), true);\n\nvar_dump($validation->isError()); // -> true\nvar_dump($validation->getErrorMessage());\n// -> \"failed\" => \"<strong>Failed Field</strong> \u306f\u534a\u89d2\u82f1\u6570\u306e\u6df7\u5408\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"\n"})})]})}function h(e={}){const{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,a,i)=>{i.d(a,{Z:()=>n,a:()=>t});var s=i(7294);const r={},d=s.createContext(r);function t(e){const a=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function n(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(d.Provider,{value:a},e.children)}}}]);